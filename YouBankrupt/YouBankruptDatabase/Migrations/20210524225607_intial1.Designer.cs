// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YouBankruptDatabaseImplements;

namespace YouBankruptDatabaseImplements.Migrations
{
    [DbContext(typeof(YouBankruptDatabase))]
    [Migration("20210524225607_intial1")]
    partial class intial1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.CreditProgram", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreditProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTerm")
                        .HasColumnType("int");

                    b.Property<double>("Persent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CreditPrograms");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.CreditProgramCurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreditProgramId")
                        .HasColumnType("int");

                    b.Property<int>("CurrenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditProgramId");

                    b.HasIndex("CurrenceId");

                    b.ToTable("CreditProgramCurrences");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.Crediting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCredit")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Creditings");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.Currence", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currences");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.CurrenceCrediting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreditingId")
                        .HasColumnType("int");

                    b.Property<int>("CurrenceCId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrenceCreditingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditingId");

                    b.HasIndex("CurrenceCreditingId");

                    b.ToTable("CurrenceCrediting");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.Customer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreditingId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatePayment")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.PurchasesCurrence", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateBuy")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchasesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Summ")
                        .HasColumnType("float");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchasesCurrences");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.PurchasesCurrenceCurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CurrenceId")
                        .HasColumnType("int");

                    b.Property<int>("PurchasesCurrenceId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchasesCurrenseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrenceId");

                    b.HasIndex("PurchasesCurrenseId");

                    b.ToTable("PurchasesCurrenceCurrences");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.Supplier", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreditProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("CreditingId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreditProgramId");

                    b.HasIndex("CreditingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.CreditProgramCurrence", b =>
                {
                    b.HasOne("YouBankruptDatabaseImplements.Models.CreditProgram", "CreditProgram")
                        .WithMany("CreditProgramCurrences")
                        .HasForeignKey("CreditProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouBankruptDatabaseImplements.Models.Currence", "Currence")
                        .WithMany("CreditProgramCurrences")
                        .HasForeignKey("CurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.CurrenceCrediting", b =>
                {
                    b.HasOne("YouBankruptDatabaseImplements.Models.Crediting", "Visit")
                        .WithMany()
                        .HasForeignKey("CreditingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouBankruptDatabaseImplements.Models.Currence", "Procedure")
                        .WithMany("CurrenceCreditings")
                        .HasForeignKey("CurrenceCreditingId");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.Payment", b =>
                {
                    b.HasOne("YouBankruptDatabaseImplements.Models.Crediting", null)
                        .WithMany("Payments")
                        .HasForeignKey("CreditingId");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.PurchasesCurrence", b =>
                {
                    b.HasOne("YouBankruptDatabaseImplements.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.PurchasesCurrenceCurrence", b =>
                {
                    b.HasOne("YouBankruptDatabaseImplements.Models.Currence", "Currence")
                        .WithMany("PurchasesCurrenceCurrences")
                        .HasForeignKey("CurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouBankruptDatabaseImplements.Models.PurchasesCurrence", "PurchasesCurrense")
                        .WithMany("PurchasesCurrenceCurrences")
                        .HasForeignKey("PurchasesCurrenseId");
                });

            modelBuilder.Entity("YouBankruptDatabaseImplements.Models.Transaction", b =>
                {
                    b.HasOne("YouBankruptDatabaseImplements.Models.CreditProgram", "CreditProgram")
                        .WithMany()
                        .HasForeignKey("CreditProgramId");

                    b.HasOne("YouBankruptDatabaseImplements.Models.Crediting", "Crediting")
                        .WithMany()
                        .HasForeignKey("CreditingId");

                    b.HasOne("YouBankruptDatabaseImplements.Models.Customer", "Customer")
                        .WithMany("TransactionWithCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
